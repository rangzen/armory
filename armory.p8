pico-8 cartridge // http://www.pico-8.com
version 41
__lua__

debug = true

acc = .3 -- acceleration
fri = .05 -- friction
blt_spd = .1 -- bullet speed
nb_enms = 15 -- number of enemies
min_time_between_damage = 20 -- minimum time between damage on the player
min_time_between_shots = 10 -- minimum time between shots

function _init()
	paused = true

	plr = {
		x = 63,
		y = 63,
		dx = 0,
		dy = 0,
		s = 1, -- sprite
		l = 8 -- life
	}

	blts = {}
	-- bullets
	enms = {}
	-- enemies
end

function _update()
	-- is the game paused?
	if paused then
		-- start the game if any button is pressed
		if btnp(0) or btnp(1) or btnp(2) or btnp(3) or btnp(4) then
			party_time = 0
			last_damage_time = party_time + 3 * 30 -- can't be damaged the first 3 seconds
			last_shot_time = party_time -- can shoot right away
			kills = 0
			paused = false
		end
		return
	else
		party_time += 1
	end

	-- player

	-- input for movement
	if btn(0) then plr.dx -= acc end
	if btn(1) then plr.dx += acc end
	if btn(2) then plr.dy -= acc end
	if btn(3) then plr.dy += acc end

	-- limit speed
	if abs(plr.dx) > 1 then plr.dx = sgn(plr.dx) end
	if abs(plr.dy) > 1 then plr.dy = sgn(plr.dy) end

	-- apply friction
	plr.dx *= 1 - fri
	plr.dy *= 1 - fri

	-- apply movement
	plr.x += plr.dx
	plr.y += plr.dy
	--printh(plr.x, "log.txt")

	-- limit position
	plr.x = mid(4, plr.x, 128 - 4)
	plr.y = mid(4, plr.y, 128 - 4)

	-- bullets

	-- shoot a bullet
	if btn(4) and party_time > last_shot_time + min_time_between_shots then
		last_shot_time = party_time

		-- find closest enemy
		local e = enms[1]
		for i = 2, #enms do
			local e2 = enms[i]
			if abs(plr.x - e2.x) + abs(plr.y - e2.y) < abs(plr.x - e.x) + abs(plr.y - e.y) then
				e = e2
			end
		end

		-- normalize direction
		local r = sqrt((e.x - plr.x) ^ 2 + (e.y - plr.y) ^ 2) / blt_spd
		local bdx = (e.x - plr.x) / r
		local bdy = (e.y - plr.y) / r

		add(
			blts, {
				x = plr.x,
				y = plr.y,
				dx = bdx,
				dy = bdy
			}
		)
	end

	-- update bullets
	for b in all(blts) do
		-- remove bullets that go off screen
		if b.x < 0 or b.x > 128 or b.y < 0 or b.y > 128 then
			del(blts, b)
		else
			-- remove bullets that hit enemies
			for e in all(enms) do
				if b.x > e.x - e.w / 2 and b.x < e.x + e.w / 2
						and b.y > e.y - e.h / 2 and b.y < e.y + e.h / 2 then
					del(blts, b)
					e.l -= 1
					if e.l <= 0 then
						del(enms, e)
						kills += 1
					end
					break
				else
					-- move bullets
					b.x += b.dx
					b.y += b.dy
				end
			end
		end
	end

	-- enemies

	if party_time % 600 == 0 then
		-- increase number of enemies
		nb_enms += 1
	end

	-- if not enough enemies, add one
	if #enms < nb_enms then
		local startx, starty
		if rnd() < 0.5 then
			-- start top or bottom
			startx = rnd(128)
			starty = 63 + sgn(rnd(1) - .5) * 71
		else
			-- start left or right
			startx = 63 + sgn(rnd(1) - .5) * 71
			starty = rnd(128)
		end
		add(
			enms, {
				x = startx,
				y = starty,
				s = 32,
				h = 6,
				w = 6,
				dx = 0,
				dy = 0,
				max_spd = .3,
				l = 2 -- life
			}
		)
	end

	-- update enemies
	for e in all(enms) do
		-- does enemy hit the player?
		if party_time > last_damage_time + min_time_between_damage
				and abs(plr.x - e.x) < e.w / 2 + 4
				and abs(plr.y - e.y) < e.h / 2 + 4 then
			plr.l -= 1
			last_damage_time = party_time
			if plr.l <= 0 then
				-- game over
				_init()
			end
		end

		-- move enemies towards player
		e.dx = plr.x - e.x
		e.dy = plr.y - e.y

		-- normalize direction
		local d = sqrt(e.dx ^ 2 + e.dy ^ 2)
		local p = e.max_spd / d
		e.dx *= p
		e.dy *= p

		-- move enemies
		e.x += e.dx
		e.y += e.dy

		-- animate enemies
		e.s = 32 + flr(party_time / 10) % 2
	end
end

function _draw()
	cls(5)

	if paused then
		print("press any button to start", 12, 8, 7)

		-- already a previous game?
		if party_time != nil and party_time > 0 then
			print("time: " .. party_time, 12, 32, 7)
			print("kills: " .. kills, 12, 40, 7)
		end
		return
	end

	print("time: " .. party_time, 0, 0, 7)

	-- player

	-- player sprite
	spr(plr.s, plr.x - 4, plr.y - 4)

	-- player life
	line(plr.x - 4, plr.y - 6, plr.x + plr.l - 5, plr.y - 6, life_color(plr.l))

	-- player direction
	-- line(plr.x + 4, plr.y + 4, plr.x + 4 + plr.dx * 8, plr.y + 4 + plr.dy * 8, 7)

	-- bullets
	for b in all(blts) do
		spr(54, b.x - 4, b.y - 4)
	end

	-- enemies
	for e in all(enms) do
		-- enemy sprite
		spr(e.s, e.x - 4, e.y - 4)

		-- enemy life
		if debug then
			line(e.x - 4, e.y - 6, e.x + e.l - 5, e.y - 6, life_color(e.l))
		end

		-- debug
		if debug then
			print(plr.x .. ", " .. plr.y, 0, 8, 7)
			print(plr.dx .. ", " .. plr.dy, 0, 16, 7)
			print(kills, 0, 24, 7)
		end
	end
end

-- helpers

-- returns the color of a life bar
function life_color(l)
	local life_color = 11
	if l < 2 then
		life_color = 8
	elseif l < 6 then
		life_color = 9
	elseif l < 8 then
		life_color = 10
	end
	return life_color
end

__gfx__
00000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002222000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000
0070070002b00b200010010000000000000000000100000000000000000000100000000000000000000000000000000000000000000000000000000000000000
00077000002222000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000220000000000000000000000000000100000000000000000000000000001000000000000000000000000000000000000000000000000000000000
00700700022222200000000000100100001001000000000001000000000000100000000000000000000000000000000000000000000000000000000000000000
00000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00800800008008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00033000000330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03333330003333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00333300033333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00333300000330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00033000003003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00300300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00880880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08778ee8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
087eeee80000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000000000000000
088eee880000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000000000000000
008eee80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00088800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
